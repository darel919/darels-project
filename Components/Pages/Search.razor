@page "/search"
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h2>Search</h2>

@if(string.IsNullOrEmpty(searchQuery)) {
    <h5>Enter your search query</h5>
}

@if (searchResults != null && !string.IsNullOrEmpty(searchQuery)) {
    <h5>@searchResults.Count videos found with query "@searchQuery"</h5>
    @foreach (var video in searchResults)
    {
        <a href="/watch?v=@video.content_id">
            <div class="videoPage" title="@video.ytData.title">
                <img class="imgThumbnail" loading="lazy" src="@video.ytData.videoThumbnails[4].url" alt="Thumbnail" width=200 />
                <div>
                    <h1>@video.ytData.title</h1>
                    <h6>Recorded at: @video.created_at</h6>
                    @if (video.total_views > 0) 
                    {
                        <h6>@video.total_views views</h6>
                    }
                    else 
                    {
                        <h6>No views</h6>
                    }
                </div>
            </div>
        </a>
    }
}
@if(searchResults == null) {
    <h1>No results for @searchQuery</h1>
}
else if (isSearching && !string.IsNullOrEmpty(searchQuery))
{
    <p>Please wait...</p>
}

@code {
    private string searchQuery;
    private List<FetchedData> searchResults = new List<FetchedData>();
    private bool isSearching;
    private Timer debounceTimer;
    public class FetchedData {
        public DateTime created_at { get; set; }
        public string content_id { get; set; }
        public string type_id { get; set; }
        public YTData ytData { get; set; }
        public int total_views { get; set; }
    }

    public class Thumbnail {
        public string url { get; set; }
    }

    public class YTData {
        public string title { get; set; }
        public List<Thumbnail> videoThumbnails { get; set; }
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await HandleLocationChanged();
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        _ = HandleLocationChanged();
    }

    private async Task HandleLocationChanged()
    {
        isSearching = true;
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        searchQuery = query.Get("q") ?? string.Empty;

        if (!string.IsNullOrEmpty(searchQuery)) {
            await FetchSearchResults();
        }
        StateHasChanged(); 
    }

    private async Task FetchSearchResults()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            searchResults = await FetchSearchResultsAsync(searchQuery);
            Console.WriteLine($"Results fetched: {searchResults.Count} items"); // Log after fetching
        }
        else
        {
            searchResults = new List<FetchedData>();
        }
    }

    private async Task<List<FetchedData>> FetchSearchResultsAsync(string query)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<Response>($"http://10.10.10.10:328/dp/search?q={query}");
            isSearching = false;
            return response?.data ?? new List<FetchedData>();
        }
        catch (Exception ex)
        {
            isSearching = false;
            Console.WriteLine($"Error fetching search results: {ex.Message}");
            return new List<FetchedData>();

        }
    }

    public class Response {
        public List<FetchedData> data { get; set; }
    }
}
