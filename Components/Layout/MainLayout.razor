@inherits LayoutComponentBase

@* <FluentLayout>
    <FluentHeader>
        <NavLink href="/" title="Home" class="navLinks">
            <img src="/favicon.png"/ alt="Logo" width="64px" height="64px">
            darel's Project
        </NavLink>
        <dpOnDotnet.Components.Modules.SearchModule></dpOnDotnet.Components.Modules.SearchModule>
    </FluentHeader>
    <FluentStack Orientation="Orientation.Horizontal" Style="height: 100%;">
        @if (ShowNav) {
            <FluentAppBar Width="250" Orientation="Orientation.Vertical">
                <FluentAppBarItem Href="/"
                    Match="NavLinkMatch.All"
                    IconRest="ResourcesIcon()"
                    IconActive="ResourcesIcon(active: true)"
                    Text="Home" />
            </FluentAppBar>
        }
        <FluentBodyContent Class="page">
            <article>
                @Body
            </article>
        </FluentBodyContent>
    </FluentStack>
</FluentLayout> *@


<FluentDesignTheme @bind-Mode="@Mode"
    @bind-OfficeColor="@OfficeColor"
    OnLoaded="@OnLoaded"
    OnLuminanceChanged="@OnLuminanceChanged"
    StorageName="theme" />
<FluentLayout>
    <header>
        <NavLink href="/" title="Home" class="navLinks">
            <img src="/favicon.png"/ alt="Logo" width="64px" height="64px">
        </NavLink>
        <dpOnDotnet.Components.Modules.SearchModule></dpOnDotnet.Components.Modules.SearchModule>
    </header>
    <FluentStack Orientation="Orientation.Horizontal" Style="height: 100%;">
        @* <FluentAppBar Orientation="Orientation.Vertical" Class="Navbar">
            <FluentAppBarItem Href="/"
                Match="NavLinkMatch.All"
                IconRest="ResourcesIcon()"
                IconActive="ResourcesIcon(active: true)"
                Text="Home" />
        </FluentAppBar> *@
        <FluentBodyContent>
            <article>
                @Body
            </article>
        </FluentBodyContent>
    </FluentStack>
</FluentLayout>

@code {
    bool ShowNav = true;
    public DesignThemeModes Mode { get; set; }
    public OfficeColor? OfficeColor { get; set; }
    void OnLoaded(LoadedEventArgs e)
    {
        Console.WriteLine($"Loaded: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    void OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        Console.WriteLine($"Changed: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }
    void PickRandomColor()
    {
        OfficeColor = OfficeColorUtilities.GetRandom();
    }

    private static Icon ResourcesIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.Home()
               : new Icons.Regular.Size24.Home();
}